# -*- coding: utf-8 -*-
"""
Created on Tue Aug  3 11:01:55 2021

@author: Jo√£o Angelo Ferres Brogin
"""

import json
import numpy as np
from mpl_toolkits.axes_grid1 import make_axes_locatable
from matplotlib.ticker import MultipleLocator
from matplotlib import rc

rc('font', **{'family':'sans-serif','sans-serif':['Helvetica']})
rc('text', usetex=True)

# Imports the coefficients that were previously saved from 'AR_models_epilepsia.py' file
filename = 'AR_coefs_PIS_signal_SUB_32.txt'

with open(filename,'r') as infile:
    arp_v = json.load(infile)

infile.close()

#%% Each coefficient as a random variable:
pp1 = []
pp2 = []
pp3 = []
pp4 = []
pp5 = []
pp6 = []

for ii in range(0, len(arp_v)):
    pp1.append( arp_v[ii][0] )
    pp2.append( arp_v[ii][1] )
    pp3.append( arp_v[ii][2] )
    pp4.append( arp_v[ii][3] )
    pp5.append( arp_v[ii][4] )
    pp6.append( arp_v[ii][5] )

#%% Transform into matrix: this part of the code takes all the coefficients (generate in the discrete SS model)
# and then concerts them to continuous models in matrix form
    
A_disc = []
A_cont = []
A_cont2 = []

for kk in range(0,len(arp_v)):
    
    AR_pars = arp_v[kk]
    l1 = AR_pars
    LAR = len(l1)
    ref_line = np.zeros(LAR)
    ref_line[0] = 1

    M = []

    for ii in range(0, LAR - 1):
        aux = np.roll( ref_line, ii )
        M = np.concatenate((M,aux), axis = 0)

    # Discrete model:
    MM = np.concatenate((l1,M), axis = 0)
    MM = np.reshape(MM, (LAR,LAR))
    
    A_disc.append( MM )

    dt = 1/1000
    Nm = len(MM)
    Id = np.identity(Nm)
    parte1 = MM - Id
    parte2 = MM + Id
    parte2_inv = np.linalg.inv(parte2)
    R = parte1.dot( parte2_inv )
    Act = (2/dt)*R

    A_cont.append( Act/10 )

#%% Plots the AR coefficients as random variables:
import matplotlib.pyplot as plt
    
plt.figure(1)
plt.subplot(611)
plt.plot( pp1, 'k.-' )
plt.xlim(0,len(arp_v)-1)
plt.ylabel(r'$\phi_{1}$',fontsize=35)
plt.grid()
plt.tick_params(axis='both', which='major', labelsize=25) 
plt.tick_params(axis='x', which='major', labelsize=0) 

min_val = min(pp1)
max_val = max(pp1)

plt.plot( min_val*np.ones(len(arp_v)), 'r--', linewidth=2 )
plt.plot( max_val*np.ones(len(arp_v)), 'r--', linewidth=2 )



plt.subplot(612)
plt.plot( pp2, 'k.-' )
plt.xlim(0,len(arp_v)-1)
plt.ylabel(r'$\phi_{2}$',fontsize=35)
plt.grid()
plt.tick_params(axis='both', which='major', labelsize=25) 
plt.tick_params(axis='x', which='major', labelsize=0) 

min_val = min(pp2)
max_val = max(pp2)

plt.plot( min_val*np.ones(len(arp_v)), 'r--', linewidth=2 )
plt.plot( max_val*np.ones(len(arp_v)), 'r--', linewidth=2 )




plt.subplot(613)
plt.plot( pp3, 'k.-' )
plt.xlim(0,len(arp_v)-1)
plt.ylabel(r'$\phi_{3}$',fontsize=35)
plt.grid()
plt.tick_params(axis='both', which='major', labelsize=25) 
plt.tick_params(axis='x', which='major', labelsize=0) 

min_val = min(pp3)
max_val = max(pp3)

plt.plot( min_val*np.ones(len(arp_v)), 'r--', linewidth=2 )
plt.plot( max_val*np.ones(len(arp_v)), 'r--', linewidth=2 )




plt.subplot(614)
plt.plot( pp4, 'k.-' )
plt.xlim(0,len(arp_v)-1)
plt.ylabel(r'$\phi_{4}$',fontsize=35)
plt.grid()
plt.tick_params(axis='both', which='major', labelsize=25) 
plt.tick_params(axis='x', which='major', labelsize=0) 

min_val = min(pp4)
max_val = max(pp4)

plt.plot( min_val*np.ones(len(arp_v)), 'r--', linewidth=2 )
plt.plot( max_val*np.ones(len(arp_v)), 'r--', linewidth=2 )




plt.subplot(615)
plt.plot( pp5, 'k.-' )
plt.xlim(0,len(arp_v)-1)
plt.ylabel(r'$\phi_{5}$',fontsize=35)
plt.grid()
plt.tick_params(axis='both', which='major', labelsize=25) 
plt.tick_params(axis='x', which='major', labelsize=0) 

min_val = min(pp5)
max_val = max(pp5)

plt.plot( min_val*np.ones(len(arp_v)), 'r--', linewidth=2 )
plt.plot( max_val*np.ones(len(arp_v)), 'r--', linewidth=2 )




plt.subplot(616)
plt.plot( pp6, 'k.-' )
plt.xlim(0,len(arp_v)-1)
plt.ylabel(r'$\phi_{6}$',fontsize=35)
plt.grid()
plt.tick_params(axis='both', which='major', labelsize=25) 

min_val = min(pp6)
max_val = max(pp6)

plt.plot( min_val*np.ones(len(arp_v)), 'r--', linewidth=2 )
plt.plot( max_val*np.ones(len(arp_v)), 'r--', linewidth=2 )
plt.xlabel('$Cells$',fontsize=35)


#%% Plots the dynamic matrices generated by both discrete and continuous models:

import matplotlib.pyplot as plt    

## Discrete models:
fig, (ax1, ax2, ax3) = plt.subplots(1,3)

im1 = ax1.imshow(A_disc[0])
ax1.tick_params(axis='both', which='major', labelsize=20) 
divider1 = make_axes_locatable(ax1)
cax1 = divider1.append_axes("right", size="10%", pad=0.1)
cbar1 = plt.colorbar(im1, cax=cax1, ticks=MultipleLocator(0.2), format="$%.1f$")
cbar1.ax.tick_params(labelsize=20)

im2 = ax2.imshow(A_disc[1])
ax2.tick_params(axis='both', which='major', labelsize=20) 
divider2 = make_axes_locatable(ax2)
cax2 = divider2.append_axes("right", size="10%", pad=0.1)
cbar2 = plt.colorbar(im2, cax=cax2, ticks=MultipleLocator(0.2), format="$%.1f$")
cbar2.ax.tick_params(labelsize=20)

im3 = ax3.imshow(A_disc[-1])
ax3.tick_params(axis='both', which='major', labelsize=20) 
divider3 = make_axes_locatable(ax3)
cax3 = divider3.append_axes("right", size="10%", pad=0.1)
cbar3 = plt.colorbar(im3, cax=cax3, ticks=MultipleLocator(0.2), format="$%.1f$")
cbar3.ax.tick_params(labelsize=20)


# Continuous models:
fig, (ax1, ax2, ax3) = plt.subplots(1,3)

im1 = ax1.imshow(A_cont[0])
ax1.tick_params(axis='both', which='major', labelsize=20) 
divider1 = make_axes_locatable(ax1)
cax1 = divider1.append_axes("right", size="10%", pad=0.1)
cbar1 = plt.colorbar(im1, cax=cax1)
cbar1.ax.tick_params(labelsize=20)

im2 = ax2.imshow(A_cont[1])
ax2.tick_params(axis='both', which='major', labelsize=20) 
divider2 = make_axes_locatable(ax2)
cax2 = divider2.append_axes("right", size="10%", pad=0.1)
cbar2 = plt.colorbar(im2, cax=cax2)
cbar2.ax.tick_params(labelsize=20)

im3 = ax3.imshow(A_cont[-1])
ax3.tick_params(axis='both', which='major', labelsize=20) 
divider3 = make_axes_locatable(ax3)
cax3 = divider3.append_axes("right", size="10%", pad=0.1)
cbar3 = plt.colorbar(im3, cax=cax3)
cbar3.ax.tick_params(labelsize=20)
